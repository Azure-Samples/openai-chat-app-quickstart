{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.36.1.42791",
      "templateHash": "14245224743665868744"
    },
    "description": "Creates a container app in an Azure Container App environment."
  },
  "parameters": {
    "name": {
      "type": "string"
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]"
    },
    "tags": {
      "type": "object",
      "defaultValue": {}
    },
    "allowedOrigins": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Allowed origins"
      }
    },
    "containerAppsEnvironmentName": {
      "type": "string",
      "metadata": {
        "description": "Name of the environment for container apps"
      }
    },
    "containerCpuCoreCount": {
      "type": "string",
      "defaultValue": "0.5",
      "metadata": {
        "description": "CPU cores allocated to a single container instance, e.g., 0.5"
      }
    },
    "containerMaxReplicas": {
      "type": "int",
      "defaultValue": 10,
      "minValue": 1,
      "metadata": {
        "description": "The maximum number of replicas to run. Must be at least 1."
      }
    },
    "containerMemory": {
      "type": "string",
      "defaultValue": "1.0Gi",
      "metadata": {
        "description": "Memory allocated to a single container instance, e.g., 1Gi"
      }
    },
    "containerMinReplicas": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "The minimum number of replicas to run. Must be at least 1."
      }
    },
    "containerName": {
      "type": "string",
      "defaultValue": "main",
      "metadata": {
        "description": "The name of the container"
      }
    },
    "containerRegistryName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The name of the container registry"
      }
    },
    "containerRegistryHostSuffix": {
      "type": "string",
      "defaultValue": "azurecr.io",
      "metadata": {
        "description": "Hostname suffix for container registry. Set when deploying to sovereign clouds"
      }
    },
    "daprAppProtocol": {
      "type": "string",
      "defaultValue": "http",
      "allowedValues": [
        "http",
        "grpc"
      ],
      "metadata": {
        "description": "The protocol used by Dapr to connect to the app, e.g., http or grpc"
      }
    },
    "daprAppId": {
      "type": "string",
      "defaultValue": "[parameters('containerName')]",
      "metadata": {
        "description": "The Dapr app ID"
      }
    },
    "daprEnabled": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable Dapr"
      }
    },
    "env": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "The environment variables for the container"
      }
    },
    "external": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Specifies if the resource ingress is exposed externally"
      }
    },
    "identityName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The name of the user-assigned identity"
      }
    },
    "identityType": {
      "type": "string",
      "defaultValue": "None",
      "allowedValues": [
        "None",
        "SystemAssigned",
        "UserAssigned"
      ],
      "metadata": {
        "description": "The type of identity for the resource"
      }
    },
    "imageName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The name of the container image"
      }
    },
    "ingressEnabled": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Specifies if Ingress is enabled for the container app"
      }
    },
    "revisionMode": {
      "type": "string",
      "defaultValue": "Single"
    },
    "secrets": {
      "type": "secureObject",
      "defaultValue": {},
      "metadata": {
        "description": "The secrets required for the container"
      }
    },
    "serviceBinds": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "The service binds associated with the container"
      }
    },
    "serviceType": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The name of the container apps add-on to use. e.g. redis"
      }
    },
    "targetPort": {
      "type": "int",
      "defaultValue": 80,
      "metadata": {
        "description": "The target port for the container"
      }
    }
  },
  "variables": {
    "usePrivateRegistry": "[and(not(empty(parameters('identityName'))), not(empty(parameters('containerRegistryName'))))]",
    "normalizedIdentityType": "[if(not(empty(parameters('identityName'))), 'UserAssigned', parameters('identityType'))]"
  },
  "resources": [
    {
      "type": "Microsoft.App/containerApps",
      "apiVersion": "2023-05-02-preview",
      "name": "[parameters('name')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "identity": {
        "type": "[variables('normalizedIdentityType')]",
        "userAssignedIdentities": "[if(and(not(empty(parameters('identityName'))), equals(variables('normalizedIdentityType'), 'UserAssigned')), createObject(format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName'))), createObject()), null())]"
      },
      "properties": {
        "managedEnvironmentId": "[resourceId('Microsoft.App/managedEnvironments', parameters('containerAppsEnvironmentName'))]",
        "configuration": {
          "copy": [
            {
              "name": "secrets",
              "count": "[length(items(parameters('secrets')))]",
              "input": {
                "name": "[items(parameters('secrets'))[copyIndex('secrets')].key]",
                "value": "[items(parameters('secrets'))[copyIndex('secrets')].value]"
              }
            }
          ],
          "activeRevisionsMode": "[parameters('revisionMode')]",
          "ingress": "[if(parameters('ingressEnabled'), createObject('external', parameters('external'), 'targetPort', parameters('targetPort'), 'transport', 'auto', 'corsPolicy', createObject('allowedOrigins', union(createArray('https://portal.azure.com', 'https://ms.portal.azure.com'), parameters('allowedOrigins')))), null())]",
          "dapr": "[if(parameters('daprEnabled'), createObject('enabled', true(), 'appId', parameters('daprAppId'), 'appProtocol', parameters('daprAppProtocol'), 'appPort', if(parameters('ingressEnabled'), parameters('targetPort'), 0)), createObject('enabled', false()))]",
          "service": "[if(not(empty(parameters('serviceType'))), createObject('type', parameters('serviceType')), null())]",
          "registries": "[if(variables('usePrivateRegistry'), createArray(createObject('server', format('{0}.{1}', parameters('containerRegistryName'), parameters('containerRegistryHostSuffix')), 'identity', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName')))), createArray())]"
        },
        "template": {
          "serviceBinds": "[if(not(empty(parameters('serviceBinds'))), parameters('serviceBinds'), null())]",
          "containers": [
            {
              "image": "[if(not(empty(parameters('imageName'))), parameters('imageName'), 'mcr.microsoft.com/azuredocs/containerapps-helloworld:latest')]",
              "name": "[parameters('containerName')]",
              "env": "[parameters('env')]",
              "resources": {
                "cpu": "[json(parameters('containerCpuCoreCount'))]",
                "memory": "[parameters('containerMemory')]"
              }
            }
          ],
          "scale": {
            "minReplicas": "[parameters('containerMinReplicas')]",
            "maxReplicas": "[parameters('containerMaxReplicas')]"
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('{0}-registry-access', deployment().name))]"
      ]
    },
    {
      "condition": "[variables('usePrivateRegistry')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-registry-access', deployment().name)]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "containerRegistryName": {
            "value": "[parameters('containerRegistryName')]"
          },
          "principalId": "[if(variables('usePrivateRegistry'), createObject('value', reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName')), '2023-01-31').principalId), createObject('value', ''))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "17670809923773573174"
            },
            "description": "Assigns ACR Pull permissions to access an Azure Container Registry."
          },
          "parameters": {
            "containerRegistryName": {
              "type": "string"
            },
            "principalId": {
              "type": "string"
            }
          },
          "variables": {
            "acrPullRole": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7f951dda-4ed3-4680-a7ca-43fe172d538d')]"
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('containerRegistryName'))]",
              "name": "[guid(subscription().id, resourceGroup().id, parameters('principalId'), variables('acrPullRole'))]",
              "properties": {
                "roleDefinitionId": "[variables('acrPullRole')]",
                "principalType": "ServicePrincipal",
                "principalId": "[parameters('principalId')]"
              }
            }
          ]
        }
      }
    }
  ],
  "outputs": {
    "defaultDomain": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.App/managedEnvironments', parameters('containerAppsEnvironmentName')), '2023-05-01').defaultDomain]"
    },
    "identityPrincipalId": {
      "type": "string",
      "value": "[if(equals(variables('normalizedIdentityType'), 'None'), '', if(empty(parameters('identityName')), reference(resourceId('Microsoft.App/containerApps', parameters('name')), '2023-05-02-preview', 'full').identity.principalId, reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName')), '2023-01-31').principalId))]"
    },
    "imageName": {
      "type": "string",
      "value": "[parameters('imageName')]"
    },
    "name": {
      "type": "string",
      "value": "[parameters('name')]"
    },
    "serviceBind": {
      "type": "object",
      "value": "[if(not(empty(parameters('serviceType'))), createObject('serviceId', resourceId('Microsoft.App/containerApps', parameters('name')), 'name', parameters('name')), createObject())]"
    },
    "uri": {
      "type": "string",
      "value": "[if(parameters('ingressEnabled'), format('https://{0}', reference(resourceId('Microsoft.App/containerApps', parameters('name')), '2023-05-02-preview').configuration.ingress.fqdn), '')]"
    }
  }
}